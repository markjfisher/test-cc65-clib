;
; File generated by cc65 v 2.19 - Git 3814f3f0
;
	.fopt		compiler,"cc65 v 2.19 - Git 3814f3f0"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	c_sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_OSWRCH
	.export		_c_sp_ptr
	.export		_print_char
	.export		_print_hex_word
	.export		_print_string
	.export		_main

.segment	"DATA"

_c_sp_ptr:
	.word	$0050

.segment	"RODATA"

S0004:
	.byte	$4C,$69,$6E,$65,$20,$33,$3A,$20,$41,$62,$6F,$75,$74,$20,$74,$6F
	.byte	$20,$72,$65,$74,$75,$72,$6E,$00
S0003:
	.byte	$4C,$69,$6E,$65,$20,$32,$3A,$20,$53,$74,$69,$6C,$6C,$20,$77,$6F
	.byte	$72,$6B,$69,$6E,$67,$00
S0005:
	.byte	$63,$5F,$73,$70,$20,$62,$65,$66,$6F,$72,$65,$20,$72,$65,$74,$75
	.byte	$72,$6E,$3A,$20,$00
S0006:
	.byte	$43,$61,$6C,$6C,$69,$6E,$67,$20,$72,$65,$74,$75,$72,$6E,$20,$30
	.byte	$2E,$2E,$2E,$00
S0001:
	.byte	$48,$65,$6C,$6C,$6F,$20,$66,$72,$6F,$6D,$20,$43,$21,$20,$76,$31
	.byte	$2E,$33,$00
S0002:
	.byte	$63,$5F,$73,$70,$20,$61,$74,$20,$73,$74,$61,$72,$74,$3A,$20,$00

; ---------------------------------------------------------------
; void __near__ print_char (char c)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_char: near

.segment	"CODE"

	jsr     pusha
	ldy     #$00
	lda     (c_sp),y
	jsr     _OSWRCH
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ print_hex_word (unsigned int value)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_hex_word: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp6
	ldy     #$07
	lda     (c_sp),y
	ldy     #$05
	sta     (c_sp),y
	iny
	lda     (c_sp),y
	ldy     #$04
	sta     (c_sp),y
	iny
	lda     (c_sp),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$0F
	ldy     #$03
	sta     (c_sp),y
	ldy     #$05
	lda     (c_sp),y
	and     #$0F
	ldy     #$02
	sta     (c_sp),y
	iny
	lda     (c_sp),y
	cmp     #$0A
	bcs     L0017
	clc
	adc     #$30
	jmp     L0018
L0017:	lda     (c_sp),y
	clc
	adc     #$41
	sec
	sbc     #$0A
L0018:	jsr     _print_char
	ldy     #$02
	lda     (c_sp),y
	cmp     #$0A
	bcs     L001A
	clc
	adc     #$30
	jmp     L001B
L001A:	lda     (c_sp),y
	clc
	adc     #$41
	sec
	sbc     #$0A
L001B:	jsr     _print_char
	ldy     #$04
	lda     (c_sp),y
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	and     #$0F
	ldy     #$01
	sta     (c_sp),y
	ldy     #$04
	lda     (c_sp),y
	and     #$0F
	ldy     #$00
	sta     (c_sp),y
	iny
	lda     (c_sp),y
	cmp     #$0A
	bcs     L001D
	clc
	adc     #$30
	jmp     L001E
L001D:	lda     (c_sp),y
	clc
	adc     #$41
	sec
	sbc     #$0A
L001E:	jsr     _print_char
	ldy     #$00
	lda     (c_sp),y
	cmp     #$0A
	bcs     L0020
	clc
	adc     #$30
	jmp     L0021
L0020:	lda     (c_sp),y
	clc
	adc     #$41
	sec
	sbc     #$0A
L0021:	jsr     _print_char
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ print_string (const char *s)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_string: near

.segment	"CODE"

	jsr     pushax
	jmp     L0004
L0002:	ldy     #$01
	lda     (c_sp),y
	sta     ptr1+1
	dey
	lda     (c_sp),y
	sta     ptr1
	lda     (ptr1),y
	pha
	ldx     #$00
	lda     #$01
	jsr     addeq0sp
	pla
	jsr     _print_char
L0004:	ldy     #$01
	lda     (c_sp),y
	sta     ptr1+1
	dey
	lda     (c_sp),y
	sta     ptr1
	lda     (ptr1),y
	bne     L0002
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	lda     #<(S0001)
	ldx     #>(S0001)
	jsr     _print_string
	lda     #$0D
	jsr     _print_char
	lda     #$0A
	jsr     _print_char
	lda     #<(S0002)
	ldx     #>(S0002)
	jsr     _print_string
	lda     _c_sp_ptr+1
	sta     ptr1+1
	lda     _c_sp_ptr
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _print_hex_word
	lda     #$0D
	jsr     _print_char
	lda     #$0A
	jsr     _print_char
	lda     #<(S0003)
	ldx     #>(S0003)
	jsr     _print_string
	lda     #$0D
	jsr     _print_char
	lda     #$0A
	jsr     _print_char
	lda     #<(S0004)
	ldx     #>(S0004)
	jsr     _print_string
	lda     #$0D
	jsr     _print_char
	lda     #$0A
	jsr     _print_char
	lda     #<(S0005)
	ldx     #>(S0005)
	jsr     _print_string
	lda     _c_sp_ptr+1
	sta     ptr1+1
	lda     _c_sp_ptr
	sta     ptr1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _print_hex_word
	lda     #$0D
	jsr     _print_char
	lda     #$0A
	jsr     _print_char
	lda     #<(S0006)
	ldx     #>(S0006)
	jsr     _print_string
	lda     #$0D
	jsr     _print_char
	lda     #$0A
	jsr     _print_char
	ldx     #$00
	txa
	rts

.endproc

